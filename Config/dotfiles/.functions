#!/bin/bash
###Los comentarios que inician con triple o sencilla '#' no se muestran en el comando de ayuda, solo aparecen los comentarios con '#' doble

###---------Add all & commit------------
##---gac:---
##Descripción: (GIT) Genera un commit (add. && commit -m) sobre el repo actual
##Uso: $ gac 'mensaje'
##Ejemplo: $ gac 'Mi primer commit'
##end
gac() { git add . && git commit -m "$1"; }

###---------Checkout------------------------
##---gc:---
##Descripción: (Git) Hace checkout, recibe como parametro la rama o '.' para deshacer los cambios
##Uso: $ gc {rama}
##Ejemplo: $ gc master
##Ejemplo: $ gc .
##end
gco() { git checkout "$1"; }

###---------New Branch------------------------
##---gcb:---
##Descripción: (Git) Crea una nueva rama, apartir de la actual
##Uso: $ gcb {rama}
##Ejemplo: $ gcb feature/nuevo_modulos
##end
gcb() { git checkout -b "$1"; }

###---------Git diff--------------------------------
##---gdf:---
##Descripción: (Git) muestra las diferencias entre
##Uso: $ gdft {parameters of gitdiff}
##Ejemplo: $ gdft master feature/test /archivos/bin/
##end
gdf() {
  if [ $# -eq 0 ]; then
    git diff --shortstat && git diff --compact-summary
  else
    git diff --shortstat "$*" && git diff --compact-summary "$*"
  fi
}

###---------Open tool for diff--------------------------------
##---gdft:---
##Descripción: (Git) Abre la herramienta para ver las diferencias entre 1 rama y la actual
##Uso: $ gdft {rama} {path}
##Ejemplo: $ gdft master /archivos/bin/
##end
gdft() {
  if [ $# -eq 0 ]; then
    git difftool
  else
    git difftool "$*"
  fi
}

###--------------Git Prompt---------------------------
##---prompt_git:---
##Descripción: (Git) Muestra la rama actual y los cambios en el prompt
##Uso: $ prompt_git {color/texto} {color/texto}
##Ejemplo: $ prompt_git {blue} {red}
##end
git_prompt() {

  local s=''
  local branchName=''

  # Check if the current directory is in a Git repository.
  git rev-parse --is-inside-work-tree &>/dev/null || return

  # Check for what branch we’re on.
  # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
  # tracking remote branch or tag. Otherwise, get the
  # short SHA for the latest commit, or give up.
  branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
    git describe --all --exact-match HEAD 2>/dev/null ||
    git rev-parse --short HEAD 2>/dev/null ||
    echo '(unknown)')"

  # Early exit for Chromium & Blink repo, as the dirty check takes too long.
  # Thanks, @paulirish!
  # https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
  repoUrl="$(git config --get remote.origin.url)"
  if grep -q 'chromium/src.git' <<<"${repoUrl}"; then
    s+='*'
  else
    # Check for uncommitted changes in the index.
    if ! git diff --quiet --ignore-submodules --cached; then
      s+='+'
    fi
    # Check for unstaged changes.
    if ! git diff-files --quiet --ignore-submodules --; then
      s+='!'
    fi
    # Check for untracked files.
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
      s+='?'
    fi
    # Check for stashed files.
    if git rev-parse --verify refs/stash &>/dev/null; then
      s+='$'
    fi
  fi

  [ -n "${s}" ] && s=" [${s}]"

  echo -e "${1} ${branchName} ${2}"
  #echo -e "${1}(${branchName})${2}${s}"
}

###--------------Git Stats---------------------------
##---git_stats:---
##Descripción: (Git) Muestra la cantidad de archivos pendientes por commit
##Uso: $ git_stats
##Ejemplo: $ git_stats
##end
git_stats() {
  STATUS=$(git status -s 2>/dev/null)

  ADDED=$(echo "$STATUS" | grep -c 'A ')
  UNTRACKED=$(echo "$STATUS" | grep -c '??')
  MODIFIED=$(echo "$STATUS" | grep -c 'M ')
  RENAMED=$(echo "$STATUS" | grep -c 'R ')
  COPIED=$(echo "$STATUS" | grep -c 'C ')
  UNMERGED=$(echo "$STATUS" | grep -c 'U')
  DELETED=$(echo "$STATUS" | grep -c 'D ')

  stat_a=$((ADDED + UNTRACKED))
  stat_m=$((MODIFIED + RENAMED + COPIED + UNMERGED))
  stat_d=$((DELETED))

  STATS="${black:=''}"
  if [ $stat_a != 0 ]; then
    STATS+="${bg_green:=''} $stat_a "
  fi
  if [ $stat_d != 0 ]; then
    STATS+="${bg_red:=''} $stat_d "
  fi
  if [ $stat_m != 0 ]; then
    STATS+="${bg_orange:=''} $stat_m "
  fi

  echo -e "$STATS${reset:=''}"
}

###---------Crear y Entrar a carpeta------------------------
##---mkcd:---
##Descripción: Crea una carpeta e ingresa en ella
##Uso: $ mkcd {nombreCarpeta}
##Ejemplo: $ mkcd proyecto
##end
mkcd() { mkdir -p "$@" && cd "$@" || exit; }